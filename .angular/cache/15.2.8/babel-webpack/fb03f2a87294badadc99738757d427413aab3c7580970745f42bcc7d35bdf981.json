{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000';\n  }\n  login(email, password) {\n    return this.http.get(`${this.apiUrl}/users`).pipe(map(users => {\n      const user = users.find(u => u.email === email && u.password === password);\n      if (user) {\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        return true;\n      }\n      return false;\n    }));\n  }\n  checkEmailExists(email) {\n    return this.http.get(`${this.apiUrl}/users`).pipe(map(users => users.some(user => user.email === email)));\n  }\n  logout() {\n    localStorage.removeItem('currentUser');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('currentUser');\n  }\n  register(user) {\n    return this.http.post(`${this.apiUrl}/users`, user);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,uBAAuB;EAEA;EAExCC,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,QAAQ,CAAC,CAACC,IAAI,CACtDT,GAAG,CAAEU,KAAK,IAAI;MACZ,MAAMC,IAAI,GAAGD,KAAK,CAACE,IAAI,CACpBC,CAAM,IAAKA,CAAC,CAACR,KAAK,KAAKA,KAAK,IAAIQ,CAAC,CAACP,QAAQ,KAAKA,QAAQ,CACzD;MACD,IAAIK,IAAI,EAAE;QACRG,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;QACzD,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACH;EACAO,gBAAgB,CAACb,KAAa;IAC5B,OAAO,IAAI,CAACF,IAAI,CAACI,GAAG,CAAQ,GAAG,IAAI,CAACC,MAAM,QAAQ,CAAC,CAACC,IAAI,CACtDT,GAAG,CAACU,KAAK,IAAIA,KAAK,CAACS,IAAI,CAACR,IAAI,IAAIA,IAAI,CAACN,KAAK,KAAKA,KAAK,CAAC,CAAC,CACvD;EACH;EAGAe,MAAM;IACJN,YAAY,CAACO,UAAU,CAAC,aAAa,CAAC;EACxC;EAEAC,UAAU;IACR,OAAO,CAAC,CAACR,YAAY,CAACS,OAAO,CAAC,aAAa,CAAC;EAC9C;EAEAC,QAAQ,CAACb,IAAS;IAChB,OAAO,IAAI,CAACR,IAAI,CAACsB,IAAI,CAAC,GAAG,IAAI,CAACjB,MAAM,QAAQ,EAAEG,IAAI,CAAC;EACrD;;AApCWV,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;EAAA0B,YAFV;AAAM","names":["map","AuthService","constructor","http","login","email","password","get","apiUrl","pipe","users","user","find","u","localStorage","setItem","JSON","stringify","checkEmailExists","some","logout","removeItem","isLoggedIn","getItem","register","post","factory","providedIn"],"sourceRoot":"","sources":["F:\\Imp\\New folder\\lab-angular-main\\src\\app\\core\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:3000';\n\n  constructor(private http: HttpClient) { }\n\n  login(email: string, password: string): Observable<boolean> {\n    return this.http.get<any[]>(`${this.apiUrl}/users`).pipe(\n      map((users) => {\n        const user = users.find(\n          (u: any) => u.email === email && u.password === password\n        );\n        if (user) {\n          localStorage.setItem('currentUser', JSON.stringify(user));\n          return true;\n        }\n        return false;\n      })\n    );\n  }\n  checkEmailExists(email: string): Observable<boolean> {\n    return this.http.get<any[]>(`${this.apiUrl}/users`).pipe(\n      map(users => users.some(user => user.email === email))\n    );\n  }\n  \n\n  logout(): void {\n    localStorage.removeItem('currentUser');\n  }\n\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem('currentUser');\n  }\n\n  register(user: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/users`, user);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}